// videoMonitor.js
const videoLimit = 4; // Limite de v√≠deos permitidos
const userVideoData = {}; // Objeto para armazenar a contagem de v√≠deos e a data do √∫ltimo envio

// Fun√ß√£o para monitorar o envio de v√≠deos
export const monitorVideos = async (conn, message) => {
    const { remoteJid: from } = message.key; // Obt√©m o ID do grupo/conversa
    const participant = message.key.participant || message.participant || from; // Obt√©m o remetente (ou o ID do grupo se n√£o estiver definido)
    const videoMessage = message.message?.videoMessage; // Verifica se a mensagem √© de v√≠deo

    // Verifique se `from` e `videoMessage` s√£o definidos
    if (!from || !videoMessage) {
        return; // Sai da fun√ß√£o se os valores essenciais estiverem indefinidos
    }

    const today = new Date().toDateString(); // Obt√©m a data de hoje

    // Inicializa a contagem para o usu√°rio se n√£o existir
    if (!userVideoData[participant]) {
        userVideoData[participant] = {
            count: 0,
            date: today
        };
    }

    // Se a data armazenada n√£o for igual √† data de hoje, reseta a contagem
    if (userVideoData[participant].date !== today) {
        userVideoData[participant].count = 0; // Reseta a contagem
        userVideoData[participant].date = today; // Atualiza a data
    }

    // Incrementa a contagem de v√≠deos do usu√°rio
    userVideoData[participant].count++;

    // Verifica se o usu√°rio enviou 4 v√≠deos
    if (userVideoData[participant].count === videoLimit) {
        const mentionMessage = `@${participant.split('@')[0]}, ùëΩùíêùíÑùíÜÃÇ ùíÜùíèùíóùíäùíêùíñ ùüí ùíóùíäÃÅùíÖùíÜùíêùíî. ùë∫ùíÜ ùíéùíÇùíèùíÖùíÇùíì ùíê *ùííùíñùíäùíèùíïùíê* üé•, *ùíóùíêùíÑùíÜÃÇ ùíîùíÜùíìùíÇÃÅ ùëπùë¨ùë¥ùë∂ùëΩùë∞ùë´ùë∂ ùíÖùíê ùíàùíìùíñùíëùíê* üö´, ùíëùíêùíäùíî ùíê ùë≥ùë∞ùë¥ùë∞ùëªùë¨ ùíÜÃÅ ùíîùíêùíéùíÜùíèùíïùíÜ *ùüí ùíëùíêùíì ùíÖùíäùíÇ* ‚è≥. *ùë≥ùíÜùíäùíÇ ùíÇùíî ùíìùíÜùíàùíìùíÇùíî* üìú.`;
        await conn.sendMessage(from, { text: mentionMessage, mentions: [participant] });
    }

    // Verifica se o usu√°rio ultrapassou o limite
    if (userVideoData[participant].count > videoLimit) {
        try {
            await conn.groupParticipantsUpdate(from, [participant], 'remove');

            // Reseta a contagem do usu√°rio ap√≥s a remo√ß√£o
            delete userVideoData[participant];
        } catch (error) {
            // Log de erro (pode ser mantido se necess√°rio)
            console.error(`Erro ao remover ${participant} do grupo:`, error);
        }
    }
};